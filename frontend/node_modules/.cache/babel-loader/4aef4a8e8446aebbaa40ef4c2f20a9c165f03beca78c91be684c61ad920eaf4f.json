{"ast":null,"code":"var _jsxFileName = \"/Users/shrishtishukla/Documents/HealMind AI/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\nimport RegisterScreen from '../components/RegisterScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isRegistered, setIsRegistered] = useState(false);\n  const handleLoginSuccess = async credentialResponse => {\n    try {\n      console.log('Login Success:', credentialResponse);\n      // Here you would typically verify the token with your backend\n      setUser(credentialResponse);\n    } catch (error) {\n      console.error('Login Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(GoogleOAuthProvider, {\n    clientId: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: user ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Welcome!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 21\n      }, this) : isRegistered ? /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        onSuccess: handleLoginSuccess,\n        onError: () => console.log('Login Failed')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(RegisterScreen, {\n        onRegister: () => setIsRegistered(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"ypGcQaLiE4tjl2ETHzmFIgeZ7kg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","GoogleOAuthProvider","GoogleLogin","RegisterScreen","jsxDEV","_jsxDEV","App","_s","user","setUser","isRegistered","setIsRegistered","handleLoginSuccess","credentialResponse","console","log","error","clientId","process","env","REACT_APP_GOOGLE_CLIENT_ID","children","fileName","_jsxFileName","lineNumber","columnNumber","onSuccess","onError","onRegister","_c","$RefreshReg$"],"sources":["/Users/shrishtishukla/Documents/HealMind AI/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\nimport RegisterScreen from '../components/RegisterScreen';\n\nconst App = () => {\n    const [user, setUser] = useState(null);\n    const [isRegistered, setIsRegistered] = useState(false);\n\n    const handleLoginSuccess = async (credentialResponse) => {\n        try {\n            console.log('Login Success:', credentialResponse);\n            // Here you would typically verify the token with your backend\n            setUser(credentialResponse);\n        } catch (error) {\n            console.error('Login Error:', error);\n        }\n    };\n\n    return (\n        <GoogleOAuthProvider clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}>\n            <div>\n                {user ? (\n                    <div>\n                        <h1>Welcome!</h1>\n                        {/* Add your chat component here */}\n                    </div>\n                ) : isRegistered ? (\n                    <GoogleLogin\n                        onSuccess={handleLoginSuccess}\n                        onError={() => console.log('Login Failed')}\n                    />\n                ) : (\n                    <RegisterScreen onRegister={() => setIsRegistered(true)} />\n                )}\n            </div>\n        </GoogleOAuthProvider>\n    );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,mBAAmB,EAAEC,WAAW,QAAQ,qBAAqB;AACtE,OAAOC,cAAc,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAMY,kBAAkB,GAAG,MAAOC,kBAAkB,IAAK;IACrD,IAAI;MACAC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,kBAAkB,CAAC;MACjD;MACAJ,OAAO,CAACI,kBAAkB,CAAC;IAC/B,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACxC;EACJ,CAAC;EAED,oBACIX,OAAA,CAACJ,mBAAmB;IAACgB,QAAQ,EAAEC,OAAO,CAACC,GAAG,CAACC,0BAA2B;IAAAC,QAAA,eAClEhB,OAAA;MAAAgB,QAAA,EACKb,IAAI,gBACDH,OAAA;QAAAgB,QAAA,eACIhB,OAAA;UAAAgB,QAAA,EAAI;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEhB,CAAC,GACNf,YAAY,gBACZL,OAAA,CAACH,WAAW;QACRwB,SAAS,EAAEd,kBAAmB;QAC9Be,OAAO,EAAEA,CAAA,KAAMb,OAAO,CAACC,GAAG,CAAC,cAAc;MAAE;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9C,CAAC,gBAEFpB,OAAA,CAACF,cAAc;QAACyB,UAAU,EAAEA,CAAA,KAAMjB,eAAe,CAAC,IAAI;MAAE;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAC7D;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE9B,CAAC;AAAClB,EAAA,CAjCID,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAmCT,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}